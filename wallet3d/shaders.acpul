### 107200:S 3d.Va.vsh

#define a_position a0
//#define a_color a1
#define a_normal a2

attribute vec4 a_position;
//attribute vec4 a_color;

attribute vec3 a_normal;

varying vec4 color;

varying float lightIntensity;
varying vec4 v_pos;

#define timer CC_Time[3]*0.5

void main()
{
  mat4 m = CC_MVPMatrix;
  
  vec4 pos = a_position;

//  vec3 light_dir = vec3(2.9,0.8,-3.0);
//  vec3 light_dir = vec3(0.,0.,0.0);
  vec3 light_dir = vec3(0.9+5.*sin(timer*2.),0.8,-3.0);
  vec4 newNormal = CC_MVMatrix * vec4(a_normal,0.0);
  lightIntensity = min(1., max(0.0, dot(newNormal.xyz, light_dir)));
//  lightIntensity = max(5., dot(newNormal.xyz, light_dir));
//  lightIntensity = dot(newNormal.xyz, light_dir);

//  pos = vec4(a_normal,1.);
//  pos = vec4(newNormal.xyz,1.);
//  pos.y -= a_normal.y;
  
//  pos.xy = vec2(pos.x, pos.y);
//  pos.xy = vec2(pos.x, 0.);

  pos.xy *= 200.;
//  pos.y *= 10.;
//  pos.x *= pos.z;
//  pos.y *= pos.z;

  gl_Position = m * pos;
//  gl_Position = vec4(0.);
//  gl_Position = vec4(0.,0.,0.,0.0001);
//  pointSize = 500.*a_position.z;
//  gl_PointSize = pointSize;
//  color = a_color;

  float r = 0.5;//sin(pos.x*pos.y+timer)*0.5+0.5;
  float g = (sin(pos.x/pos.y+timer*2.)*0.5+0.5)*2.;
  float b = 0.5;//sin((pos.x-pos.y)*sin(timer*2.))*0.5+0.5;
  color = vec4(r/g,g,b/g, 1.0);

  v_pos = a_position;
  gl_PointSize = 5.;

  float SCALE_FACTOR = 2.;
}



### 107201:S bn-circle.fsh

//#ifdef GL_ES
//precision mediump float;
//#endif

//#extension GL_OES_standard_derivatives : enable

//uniform float time;
//uniform vec2 resolution;

#define resolution vec2(512.)
#define time CC_Time[3]*0.5

varying vec4 color;
varying float lightIntensity;
varying vec4 v_pos;

void main( void ) {
//  vec2 position = ((gl_FragCoord.xy / resolution.xy) * 2. - 1.) * vec2(resolution.x / resolution.y, 1.0);
  
//  vec2 position = ((gl_FragCoord.xy / resolution.xy) * 2. - 1.) * vec2(resolution.x / resolution.y, 1.0);
  vec2 position = (((v_pos.xy * vec2(v_pos.z) + vec2(0.5, 0.8)) * resolution / resolution.xy) * 2. - 1.) * vec2(resolution.x / resolution.y, 1.0);
  float d = abs(0.1 + length(position) - 0.5 * abs(cos(sin(time)))) * 5.0;

//  float d = 1.;
//  gl_FragColor = vec4(sin(time) /4./d, 0.1 / d, cos(time) /4.0 / d, 1.0);
  gl_FragColor = vec4(sin(time) /2./d, 0.2 / d, cos(time) /2.0 / d, 1.0);
//  gl_FragColor.a = gl_FragColor.r;
//  gl_FragColor.a += gl_FragColor.r+gl_FragColor.b;
  gl_FragColor.a += gl_FragColor.r+gl_FragColor.b;
  gl_FragColor.rgb += vec3(gl_FragColor.a)*0.1;
//  gl_FragColor.rgb=vec3(0.1)-gl_FragColor.rgb;
//  gl_FragColor+=vec4(0.1);
//  gl_FragColor *= (lightIntensity+0.5);
  gl_FragColor *= (lightIntensity+2.5);
//  gl_FragColor = vec4(1.);
  gl_FragColor *= vec4(.7);
}



### 107202:S bn-circle.fsh

//#ifdef GL_ES
//precision mediump float;
//#endif

//#extension GL_OES_standard_derivatives : enable

//uniform float time;
//uniform vec2 resolution;

#define resolution vec2(512.)
#define time CC_Time[3]*0.5

varying vec4 color;
varying float lightIntensity;
varying vec4 v_pos;

void main( void ) {
//  vec2 position = ((gl_FragCoord.xy / resolution.xy) * 2. - 1.) * vec2(resolution.x / resolution.y, 1.0);
  
//  vec2 position = ((gl_FragCoord.xy / resolution.xy) * 2. - 1.) * vec2(resolution.x / resolution.y, 1.0);
  vec2 position = (((v_pos.xy * vec2(v_pos.z*2.1) + vec2(0.5, 0.8)) * resolution / resolution.xy) * 2. - 1.) * vec2(resolution.x / resolution.y, 1.0);
  float d = abs(0.1 + length(position) - 0.5 * abs(cos(sin(time)))) * 5.0;

//  float d = 1.;
  gl_FragColor = vec4(sin(time) /4./d, 0.1 / d, cos(time) /4.0 / d, 1.0);
//  gl_FragColor.a = gl_FragColor.r;
//  gl_FragColor.a += gl_FragColor.r+gl_FragColor.b;
  gl_FragColor.a += gl_FragColor.r+gl_FragColor.b;
  gl_FragColor.rgb += vec3(gl_FragColor.a)*0.1;
  gl_FragColor+=vec4(0.1);
  gl_FragColor *= (lightIntensity+.5);
  gl_FragColor.rb*=vec2(2.5);
//  gl_FragColor = vec4(1.);
}



### 107203:S light-plasma.fsh

#ifdef GL_ES
precision highp float;
#endif

#extension GL_OES_standard_derivatives : enable

//uniform float time;
//uniform vec2 mouse;
//uniform vec2 resolution;

#define time CC_Time[3]*0.5
#define resolution vec2(1.,time)
#define mouse vec2(0.)

varying vec4 v_pos;

void main( void ) {
  
  vec3 rColor = vec3(0.7, 0.0, 0.3);
  vec3 gColor = vec3(0.5, 0.1, 0.1);
  vec3 bColor = vec3(0.7, 0.1, 0.1);
  vec3 yColor = vec3(0.1, 0.1, 0.0);

//  vec2 position = ( gl_FragCoord.xy / resolution.xy ) + mouse / 4.0;
//  position = gl_FragCoord.xy * 2.0 - resolution;
  vec2 position = (((v_pos.xy * vec2(v_pos.z) + vec2(0., 0.)) * resolution / resolution.xy) * 2. - 1.) * vec2(resolution.x / resolution.y, 1.0);
  position = v_pos.xy * 2.0 - resolution;
  position /= min(resolution.x, resolution.y);
  
  float a = sin(position.y * 1.5 - time * 0.1) / 1.0;
  float b = cos(position.y * 1.5 - time * 0.2) / 1.0;
  float c = sin(position.x * 0.5 - time * 0.2 + 3.14) / 2.0;
  float d = cos(position.y * 1.5 - time * 0.5 + 3.14) / 2.0;
  
  float e = 2.51 / abs(position.x + a);
  float f = 0.51 / abs(position.x + b * cos(time * 0.1));
  float g = 0.51 / abs(position.y + c);
  float h = 0.51 / abs(position.x + d);
  
  vec3 color = rColor * e * rColor * f + bColor * g * h * f * 0.01;

  
  gl_FragColor = vec4(color, 1.0);

}

### 107205:S lastblock-clock.fsh


/*
  Daily an hour GLSL sketch by @chimanaco 3/30

  References:
  http://tokyodemofest.jp/2014/7lines/index.html
*/

#ifdef GL_ES
precision mediump float;
#endif

//uniform vec2  resolution;
//uniform float time;
//uniform vec2 mouse;

#define resolution vec2(512.)
#define time CC_Time[3]*0.5
#define mouse vec2(0.)

varying vec4 v_pos;

float PI = 3.1415926535;

void main( void ) {
    vec2 p = (((v_pos.xy * vec2(v_pos.z) + vec2(0.5, 0.)) * resolution / resolution.xy) * 2. - 1.) * vec2(resolution.x / resolution.y, 1.0);
//    vec2 p=(gl_FragCoord.xy -.5 * resolution)/ min(resolution.x,resolution.y);
    vec3 c = vec3(0);
   
    for(int i = 0; i < 120; i++){
    float t = 2.* PI * float(i) / 40. * fract(time*0.2);
    float x = cos(t) * sin(t);
    float y = sin(-t);
    vec2 o = 0.36 * vec2(x,y);
    float r = fract(t);
    float g = 1.-r;
    float b = 1.-g;
    c += 0.0046/(length(p-o))*vec3(r,.2,b);
    }
    gl_FragColor = vec4(c,1);
}

### 107207:S block-move.fsh bad


#ifdef GL_ES
precision mediump float;
#endif

//uniform float time;
//uniform vec2 mouse;
//uniform vec2 resolution;

vec3 iResolution;
float iGlobalTime;

#define resolution vec2(512.)
#define time CC_Time[3]*0.5
#define mouse vec2(0.)

varying vec4 v_pos;

// I/O fragment shader by movAX13h, August 2013

#define SHOW_BLOCKS

float rand(float x)
{
  return fract(sin(x) * 4358.5453123);
}

float box(vec2 p, vec2 b, float r)
{
  return length(max(abs(p)-b,0.0))-r;
}

float sampleMusic()
{
  return mouse.x;
}

void main(void)
{
  const float speed = 0.7;
  const float ySpread = 1.6;
  const int numBlocks = 7;

        iResolution = vec3(resolution, 1.0);
        iGlobalTime = time;

  float pulse = sampleMusic();
  
//  vec2 uv = gl_FragCoord.xy / iResolution.xy - 0.5;
  vec2 uv = v_pos.xy*vec2(2.);//(((v_pos.xy * vec2(v_pos.z) + vec2(0., 0.)) * resolution / resolution.xy) * 2. - 1.) * vec2(resolution.x / resolution.y, 1.0);
  float aspect = iResolution.x / iResolution.y;
  vec3 baseColor = uv.x > 0.0 ? vec3(0.0,0.3, 0.6) : vec3(0.6, 0.0, 0.3);
  
  vec3 color = pulse*baseColor*0.5*(0.9-cos(uv.x*8.0));
  uv.x *= aspect;
  
  for (int i = 0; i < numBlocks; i++)
  {
    float z = 1.0-0.7*rand(float(i)*1.4333); // 0=far, 1=near
    float tickTime = iGlobalTime*z*speed + float(i)*1.23753;
    float tick = floor(tickTime);
    
    vec2 pos = vec2(0.6*aspect*(rand(tick)-0.5), sign(uv.x)*ySpread*(0.5-fract(tickTime)));
    pos.x += 0.24*sign(pos.x); // move aside
    if (abs(pos.x) < 0.1) pos.x++; // stupid fix; sign sometimes returns 0
    
    vec2 size = 1.8*z*vec2(0.04, 0.04 + 0.1*rand(tick+0.2));
    float b = box(uv-pos, size, 0.01);
    float dust = z*smoothstep(0.22, 0.0, b)*pulse*0.5;
    #ifdef SHOW_BLOCKS
    float block = 0.2*z*smoothstep(0.002, 0.0, b);
    float shine = 0.6*z*pulse*smoothstep(-0.002, b, 0.007);
    color += dust*baseColor + block*z + shine;
    #else
    color += dust*baseColor;
    #endif
  }
  
  gl_FragColor = vec4(color, 1.0);
}

### 107209:S crystal-points.fsh


precision highp float;

//uniform float time;
//uniform vec2 resolution;

#define resolution vec2(1152.)
#define time CC_Time[3]*0.5
#define mouse vec2(0.)

varying vec4 v_pos;

// More Mods By NRLABS 2016

float speed = 0.0750;

float ball(vec2 p, float fx, float fy, float ax, float ay)
{
  vec2 r = vec2(p.x + sin(time*speed / 2.0 * fx) * ax * 12.0, p.y + cos(time*speed/ 2.0 * fy) * ay * 8.0);  
  return .057 / length(r / sin(fy * time * 0.1));
}

void main(void)
{
//  vec2 p = ( gl_FragCoord.xy / resolution.xy ) * 2.0 - 1.0;
//  vec2 p = ( v_pos.xy / resolution.xy ) * 2.0 - 1.0;
  vec2 p = (((v_pos.xy / vec2(2.*v_pos.z)/vec2(2.) + vec2(0.5, 0.9)) * resolution / resolution.xy) * 2. - 1.) * vec2(resolution.x / resolution.y, 1.0);
  p.x *= resolution.x / resolution.y;
  
  float col = 0.0 ,col2 = 0.0;
  col += ball(p, 31.0, 22.0, 0.03, 0.09);
  col += ball(p, 22.5, 22.5, 0.04, 0.04);
  col += ball(p, 12.0, 23.0, 0.05, 0.03);
  col += ball(p, 32.5, 33.5, 0.06, 0.04);
  col += ball(p, 23.0, 24.0, 0.07, 0.03); 
  col += ball(p, 21.5, 22.5, 0.08, 0.02);
  col += ball(p, 33.1, 21.5, 0.09, 0.07);
  col += ball(p, 23.5, 32.5, 0.09, 0.06);
  col += ball(p, 14.1, 13.5, 0.09, 0.05);
  
  col2 += ball(p, 22.0, 27.0, 0.03, 0.05);
  col2 += ball(p, 12.5, 17.5, 0.04, 0.06);
  col2 += ball(p, 23.0, 17.0, 0.05, 0.02);
  col2 += ball(p, 19.5, 23.5, 0.06, 0.09);
  col2 += ball(p, 33.0, 14.0, 0.07, 0.01);  
  col2 += ball(p, 11.5, 12.5, 0.08, 0.04);
  col2 += ball(p, 23.1, 11.5, 0.09, 0.07);
  col2 += ball(p, 13.5, 22.5, 0.09, 0.03);
  col2 += ball(p, 14.1, 23.5, 0.09, 0.08);
  col2 += ball(p, 8.1, 2.5, 0.9, 0.8);
//  gl_FragColor = vec4(pow(col * 0.54 * col2,3.0/col), col * 0.34, col2 * 0.9 * sin(time), 1.0) + vec4(col2 * 0.33, col * col2 * 0.24 * cos(time),col2*0.9,1.0);
  gl_FragColor = vec4(pow(col * 0.54 * col2,3.0/col), col * 0.34, col2 * 0.9 * sin(time), 1.0) + vec4(col2 * 0.33, col * col2 * 0.24 * cos(time),col2*0.9,1.);
//  gl_FragColor *= vec4((gl_FragColor.r+gl_FragColor.g+gl_FragColor.b)/3.);
//  gl_FragColor = vec4(1.)-gl_FragColor;
}



### 107210:S 3d.Va.tex.vsh

#define a_position a0
//#define a_color a1
#define a_normal a2
#define a_texCoord a3

attribute vec4 a_position;
attribute vec2 a_texCoord;
//attribute vec4 a_color;

attribute vec3 a_normal;

varying vec4 color;
varying float lightIntensity;
varying vec4 v_pos;
varying mediump vec2 v_texCoord;

#define timer CC_Time[3]*0.5

void main()
{
  mat4 m = CC_MVPMatrix;
  
  vec4 pos = a_position;

//  vec3 light_dir = vec3(2.9,0.8,-3.0);
//  vec3 light_dir = vec3(0.,0.,0.0);
  vec3 light_dir = vec3(0.9+5.*sin(timer*2.),0.8,-3.0);
  vec4 newNormal = CC_MVMatrix * vec4(a_normal,0.0);
  lightIntensity = min(1., max(0.0, dot(newNormal.xyz, light_dir)));
//  lightIntensity = max(5., dot(newNormal.xyz, light_dir));
//  lightIntensity = dot(newNormal.xyz, light_dir);

//  pos = vec4(a_normal,1.);
//  pos = vec4(newNormal.xyz,1.);
//  pos.y -= a_normal.y;
  
//  pos.xy = vec2(pos.x, pos.y);
//  pos.xy = vec2(pos.x, 0.);

  pos.xy *= 200.;
//  pos.y *= 10.;
//  pos.x *= pos.z;
//  pos.y *= pos.z;

  gl_Position = m * pos;
//  gl_Position = vec4(0.);
//  gl_Position = vec4(0.,0.,0.,0.0001);
//  pointSize = 500.*a_position.z;
//  gl_PointSize = pointSize;
//  color = a_color;

  float r = 0.5;//sin(pos.x*pos.y+timer)*0.5+0.5;
  float g = (sin(pos.x/pos.y+timer*2.)*0.5+0.5)*2.;
  float b = 0.5;//sin((pos.x-pos.y)*sin(timer*2.))*0.5+0.5;
  color = vec4(r/g,g,b/g, 1.0);

  v_pos = a_position;
  gl_PointSize = 5.;

  float SCALE_FACTOR = 2.;

  v_texCoord = a_texCoord;
}

### 107211:S 3d.tex.fsh

#define time CC_Time[3]*0.5

varying vec4 color;
varying float lightIntensity;
varying vec4 v_pos;

varying vec2 v_texCoord;

uniform sampler2D p0;

void main()
{
  vec4 c = texture2D(p0, v_texCoord);
/*  float p = 0.05;
  float m = 1.;
  vec4 c = (texture2D(p0, v_texCoord)
    + texture2D(p0, v_texCoord+vec2(p,0.))*m
    + texture2D(p0, v_texCoord+vec2(0.,p))*m
    + texture2D(p0, v_texCoord+vec2(-p,0.))*m
    + texture2D(p0, v_texCoord+vec2(0.,-p))*m
      )/(1.+4.*m);*/
//  c = c.g * vec4(0.3,1.,0.+sin(v_texCoord.x*2.),1.);
  gl_FragColor = c*0.5;
  float b = 0.;
  float time1 = time*.1;   
  gl_FragColor.b *= 0.2+0.5+0.5*sin(time1*1.5+b);
  gl_FragColor.g *= 0.2+0.5+0.5*sin(time1*0.7+b);
  gl_FragColor.r *= 2.1+2.*sin(time1*2.+b);
//  gl_FragColor *= (lightIntensity+.5);
//  gl_FragColor = vec4(0.5);
}
